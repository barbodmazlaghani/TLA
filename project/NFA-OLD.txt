import os
os.environ["PATH"] += os.pathsep + 'C:/Program Files (x86)/Graphviz2.27/bin'


from dfa import DFA as OtherDFA

special_regex_characters = ["*", "(", ")", "+", "Î£"]


class DFA:
    state_list = []
    alphabet_list = []
    final_state_list = []
    rule_set = []

    def __init__(self, state_list, alphabet_list, final_state_list, rule_set):
        self.state_list = state_list
        self.alphabet_list = alphabet_list
        self.final_state_list = final_state_list
        self.rule_set = rule_set

    def extract_rule(self, input_string):
        input_string = input_string.replace("-", " ")

        rule_set = input_string.split()

        if rule_set[0] not in self.state_list or rule_set[1] not in self.state_list:
            raise Exception("Rule wrong. not in state list")

        return rule_set

    def draw_dfa(self):
        import matplotlib.pyplot as plt
        import networkx as nx

        G = nx.DiGraph()
        for elem in self.state_list:
            G.add_node(str(elem), pos=(0, 0), name=str(elem))

        for elem in self.rule_set:
            converted_elem = self.extract_rule(elem)
            if len(elem) == 2:
                G.add_edge(converted_elem[0], converted_elem[1], name="")
            else:
                G.add_edge(
                    converted_elem[0], converted_elem[1], name=converted_elem[2])

        pos = nx.spring_layout(G)
        nx.draw(G, pos)
        node_labels = nx.get_node_attributes(G, 'name')
        nx.draw_networkx_labels(G, pos, labels=node_labels)
        edge_labels = nx.get_edge_attributes(G, 'name')
        nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)
        plt.savefig('dfa.png')

        return


class ProcessLayer:
    state = ""
    result = ""
    is_completely_processed = False

    def __init__(self, state, result, is_completely_processed):
        self.state = state
        self.result = result
        self.is_completely_processed = is_completely_processed


class NFA:
    inital_state = ""
    state_list = []
    alphabet_list = []
    final_state_list = []
    rule_set = []
    dfa = None

    def extract_states_from_input(self, input_string):
        input_string = input_string.replace("{", "")
        input_string = input_string.replace("}", "")
        input_string = input_string.replace(",", " ")

        return input_string.split()

    def extract_rule(self, input_string):
        input_string = input_string.replace(",", " ")
        rule_set = input_string.split()
        if rule_set[0] not in self.state_list:
            raise Exception("Rule wrong. not in state list")

        return rule_set

    def extract_input_string(self, input_string):
        input_string_list = []
        for i in input_string:
            input_string_list.append(i)
        return input_string_list

    def check_final_state_list(self):
        for i in self.final_state_list:
            if i not in self.state_list:
                raise Exception("Final state wrong. not in state list")

    def begin_program(self):
        #state_input = input("1- input states: ")  # {q0,q1,q2,q3,q4,q5}
        state_input = "{q0,q1,q2,q3,q4,q5,q6}"
        #alphabet_input = input("1- input alphabet: ")  # {a,b}
        alphabet_input = "{a,b}"
        #final_state_input = input("1- input final states: ")  # {q1,q3}
        final_state_input ="{q1,q3,q6}"
        #rule_count = input("1- input rule count: ")  # 6,
        rule_count = "9"

        self.state_list = self.extract_states_from_input(state_input)
        self.inital_state = self.state_list[0]
        self.alphabet_list = self.extract_states_from_input(alphabet_input)

        self.final_state_list = self.extract_states_from_input(
            final_state_input)
        self.check_final_state_list()

        rule_set = []
        #for i in range(0, int(rule_count)):
        #     rule = input("input {0}st rule: ".format(i+1))
         #    rule_set.append(self.extract_rule(rule))
        temp_rule_set = ["q0,q1,a",
                        "q1,q1,b",
                        "q1,q2,",
                        "q2,q3,a",
                         "q3,q2,a",
                         "q3,q4,b",
                         "q2,q5,b",
                         "q5,q6,a",
                         "q6,q1,b"]
        for elem in temp_rule_set:
            rule_set.append(self.extract_rule(elem))
        self.rule_set = rule_set


    def check_input_string_list(self, input_string_list):
        for i in input_string_list:
            if(i not in self.alphabet_list):
                return False

        return True

    def get_next_state(self, initial_state, alphabet_word):
        next_direct_state_list = []
        for elem in self.rule_set:
            if elem[0] == initial_state and len(elem) == 3 and elem[2] == alphabet_word:
                next_direct_state_list.append(elem[1])

        next_indirect_state_list = []
        next_state_list_with_lambda = []
        for elem in self.rule_set:
            if elem[0] == initial_state and len(elem) == 2:
                next_state_list_with_lambda.append(elem[1])

        for elem in self.rule_set:
            for state in next_state_list_with_lambda:
                if elem[0] == state and len(elem) == 3 and elem[2] == alphabet_word:
                    next_indirect_state_list.append(elem[1])

        next_direct_state_list.extend(next_indirect_state_list)
        
        for elem in next_direct_state_list:
            for rule in self.rule_set:
                if len(rule) == 2 and rule[0] == elem:
                    next_direct_state_list.append(rule[1])

        # print("state: " + str(initial_state) + " alphabet_word: " + str(alphabet_word) + " next_state: " + str(next_direct_state_list))
        return list(set(next_direct_state_list))

    def travers_nfa(self, input_string_list, input_string_length):
        self.check_input_string_list(input_string_list)
        current_state_list = []
        first_word = True
        for i in range(0, input_string_length):
            alphabet_word = input_string_list.pop(0)
            if first_word:
                next_states = self.get_next_state(
                    self.inital_state, alphabet_word)
                current_state_list = next_states
                first_word = False

            else:
                next_state_list = []
                current_state_list_length = len(current_state_list)
                for j in range(0, current_state_list_length):
                    current_state = current_state_list.pop(0)
                    result = self.get_next_state(current_state, alphabet_word)
                    next_state_list.extend(result)

                current_state_list.extend(next_state_list)
            current_state_list = list(set(current_state_list))

        return current_state_list

    def is_accepted_by_nfa(self):
        input_string = input('1- input string,e.g aabba: ')
        input_string_list = self.extract_input_string(input_string)

        final_path_state_list = self.travers_nfa(
            input_string_list, len(input_string_list))
        for state in final_path_state_list:
            if state in self.final_state_list:
                return True

        return False


    def convert_nfa_state_list_to_dfa_state(self, state_list):
        if len(state_list) == 0:
            return None
        elif len(state_list) == 1:
            return state_list[0]

        dfa_state = "{"

        for elem in state_list:
            dfa_state += elem + ","

        dfa_state += "}"
        dfa_state = dfa_state[:len(dfa_state) - 2] + \
            dfa_state[len(dfa_state) - 1:]
        return dfa_state

    def is_final_state_of_dfa(self, state):
        if state[0] == "{":
            state_list = self.extract_states_from_input(state)
            for elem in state_list:
                if elem in self.final_state_list:
                    return True

        if state in self.final_state_list:
            return True

        return False


    def trim_down_dfa(self, dfa_state_list, dfa_rule_set, dfa_generated_state_list):
        new_state_list = []
        for dfa_state in dfa_generated_state_list:
            new_state_list.append(dfa_state)

        for elem in dfa_state_list:
            in_gen_list = False
            for dfa_state in dfa_generated_state_list:
                if elem in dfa_state:
                    in_gen_list = True
            if not in_gen_list:
                new_state_list.append(elem)

        new_state_list = list(set(new_state_list))
        new_rule_set = []
        for rule in dfa_rule_set:
            rule = rule.split("-")
            for state in new_state_list:
                if rule[0] in state:
                    found_initial_state = [found_state for found_state in new_state_list if found_state == state][0]
                    found_destiny_state = [found_state for found_state in new_state_list if rule[1] in found_state][0]
                    new_rule_set.append("{}-{}-{}".format(found_initial_state, found_destiny_state, rule[2]))

        new_rule_set = list(set(new_rule_set))
        return dfa_generated_state_list, new_state_list, new_rule_set

    def create_equivalent_dfa(self):
        dfa_alphabet_list = self.alphabet_list
        dfa_state_list = []
        dfa_final_state_list = []
        dfa_rule_set = []
        another_dfa_rule_set = []

        temp_state_list = self.state_list
        dfa_generated_state_list = []
        while len(temp_state_list) > 0:
            state = temp_state_list.pop(0)
            for alphabet_word in self.alphabet_list:
                next_state = self.get_next_state(state, alphabet_word)
                dfa_state = self.convert_nfa_state_list_to_dfa_state(
                    next_state)
                if dfa_state is not None:
                    if(dfa_state[0] == "{"):
                        dfa_generated_state_list.append(dfa_state)

                    dfa_state_list.append(dfa_state)
                    dfa_state_list = list(set(dfa_state_list))
                    dfa_rule_set.append(
                        "{}-{}-{}".format(state, dfa_state, alphabet_word))

                    another_dfa_rule_set.append(
                        [state, dfa_state, alphabet_word])

            dfa_state_list.append(state)

        dfa_generated_state_list = list(set(dfa_generated_state_list))
        dfa_generated_state_list, dfa_state_list, dfa_rule_set = self.trim_down_dfa(dfa_state_list, dfa_rule_set, dfa_generated_state_list)

        print(dfa_rule_set)
        # original_dfa_generated_state_list = dfa_generated_state_list.copy()
        # while len(dfa_generated_state_list) > 0:
        #     state = dfa_generated_state_list.pop(0)
        #     generated_state_list = self.extract_states_from_input(state)
        #     for generated_state in generated_state_list:
        #         for alphabet_word in self.alphabet_list:
        #             next_state = self.get_next_state(
        #                 generated_state, alphabet_word)

        #             dfa_state = self.convert_nfa_state_list_to_dfa_state(
        #                 next_state)
        #             if dfa_state is not None:
        #                 dfa_state_list.append(state)
        #                 dfa_state_list = list(set(dfa_state_list))
        #                 dfa_rule_set.append(
        #                     "{}-{}-{}".format(state, dfa_state, alphabet_word))
        #                 another_dfa_rule_set.append(
        #                     [state, dfa_state, alphabet_word])

        for state in dfa_state_list:
            if(self.is_final_state_of_dfa(state)):
                dfa_final_state_list.append(state)

        print(dfa_final_state_list)
        dfa = DFA(dfa_state_list, dfa_alphabet_list,
                  dfa_final_state_list, dfa_rule_set)

        # other_dfa = OtherDFA(dfa_state_list, dfa_alphabet_list,
        #                      dfa_final_state_list, another_dfa_rule_set)
        self.dfa = dfa
        dfa.draw_dfa()

        return dfa


    def draw_nfa(self):
        from graphviz import Digraph

        diagram = Digraph('nfa', format='png')
        diagram.attr(rankdir='q', size='8,5')

        diagram.attr('node', shape='doublecircle')
        for final_state in self.final_state_list:
            diagram.node(final_state)
        
        diagram.attr('node', shape='circle')
        for rule in self.rule_set:
            if len(rule) == 2:
                diagram.edge(rule[0], rule[1], label='')
            else:
                diagram.edge(rule[0], rule[1], label=rule[2])
        
        diagram.render()

        return


    def get_input_to_this_state(self, state):
        regex = ""
        for elem in self.rule_set:
            if elem[1] == state:
                regex += "+"
                if len(elem) == 2:
                    regex += "{}{}".format(elem[0], "")
                else:
                    regex += "{}{}".format(elem[0], elem[2])

        if state == self.inital_state:
            regex += "+Î£"

        return regex[1:]

    def regex_has_state(self, string):
        char = ""
        for i in string:

            if i in self.alphabet_list or i in special_regex_characters:
                char = ""
                continue

            char += i
            if char in self.state_list:
                return True

        return False

    def update_regex_lists(self, processed_levels, processing_levels):
        processed_levels = [
            item for item in processed_levels if item.level != 0]
        processing_levels = [
            item for item in processing_levels if item not in processed_levels and item.level != 0]

        return processed_levels, processing_levels

    def extract_regex(self, regex):
        regex_list = []

        temp = ""
        i = 1
        for char in regex:
            if temp == "" or temp in special_regex_characters:
                temp = char

            elif temp in self.alphabet_list:
                regex_list.append({"alphabet": temp, "order": i})
                i += 1
                temp = char

            elif temp in self.state_list:
                regex_list.append({"state": temp, "order": i})
                i += 1
                temp = char

            else:
                temp += char

        if temp in self.alphabet_list:
            regex_list.append({"alphabet": temp, "order": i})
        elif temp in self.state_list:
            regex_list.append({"state": temp, "order": i})

        return regex_list

    def replace_state_with_regex(self, original_string, replace_string, with_string):
        if len(with_string) > 1:
            replaced_string = original_string.replace(
                replace_string, "({})".format(with_string))
        else:
            replaced_string = original_string.replace(
                replace_string, with_string)

        return replaced_string

    def make_binary(self, string):
        if "(" in string:
            temp_string = string[::-1]
            temp = ""
            for char in temp_string:
                if char == ")":
                    break
                else:
                    temp += char

            temp = temp[::-1]

            result = ""
            stop = False
            for char in temp_string:
                if stop == True:
                    break

                elif char == "(":
                    stop = True

                elif char == ")":
                    continue

                elif char == "+":
                    result += char + temp

                else:
                    result += char

            string = result[::-1]

        elif "+" in string:
            return string.replace("+", " ").split()

        if "+" in string:
            return self.make_binary(string)
        else:
            return [string]

    def remove_duplicate_from_regex(self, original_state, regex):
        split_index = 0
        stack = 0
        for i in regex:
            if i == "+" and stack == 0:
                break
            if i == "(":
                stack += 1
            elif i == ")":
                stack -= 1
            split_index += 1

        string_list = [regex[split_index+1:], regex[:split_index]]

        binary_list = []
        for string in string_list:
            binary = self.make_binary(string)
            binary_list.extend(binary)

        star_count = 0
        for i in range(0, len(binary_list)):
            if original_state in binary_list[i]:
                star_count = i

        if star_count > 0:
            temp = "("
            for i in range(0, len(binary_list)):
                if i == star_count:
                    temp = temp[:-1]
                    temp += ")" + binary_list[i].replace(original_state, "*")
                else:
                    temp += binary_list[i] + "+"
        else:
            temp = ""
            for i in range(0, len(binary_list)):
                temp += binary_list[i] + "+"
            temp = temp[:-1]

        return temp

    def simplify_regex(self, initial_regex, processing_levels):
        state_list = self.extract_regex(initial_regex.result)
        state_list.sort(key=lambda x: x["order"])

        for elem in state_list:
            if "state" in elem:
                for processing_level in processing_levels:
                    if processing_level.state == elem["state"]:
                        produced_regex = self.replace_state_with_regex(
                            initial_regex.result, elem["state"], processing_level.result)
                        if initial_regex.state in produced_regex:
                            produced_regex = self.remove_duplicate_from_regex(
                                original_state=initial_regex.state, regex=produced_regex)
                        if not self.regex_has_state(produced_regex):
                            return produced_regex, True

                        return produced_regex, False

        return initial_regex.result, False

    def check_if_regex_finished(self, processing_levels):
        finished_list = [elem for elem in processing_levels if elem.is_completely_processed ==
                         True and elem.state in self.final_state_list]
        if len(finished_list) == len(self.final_state_list):
            return True

    def find_regex(self):
        processing_levels = []

        for elem in self.state_list:
            is_completely_processed = False
            produced_regex = self.get_input_to_this_state(elem)
            if not self.regex_has_state(produced_regex):
                is_completely_processed = True

            processing_levels.append(
                ProcessLayer(state=elem, result=produced_regex,
                             is_completely_processed=is_completely_processed)
            )

        temp_processing_list = []
        while True:
            for elem in processing_levels:
                if(self.regex_has_state(elem.result)):
                    regex, is_final_state = self.simplify_regex(
                        initial_regex=elem, processing_levels=processing_levels)
                    elem.result = regex
                    if is_final_state:
                        elem.is_completely_processed = True

                else:
                    elem.is_completely_processed = True

            if(self.check_if_regex_finished(processing_levels)):
                break

        regex = ""
        for elem in processing_levels:
            if elem.state in self.final_state_list and elem.is_completely_processed:
                regex += "+" + elem.result

        regex = regex[1:]
        if "+)" in regex:
            regex = regex.replace("+)", ")")
        if "+" == regex[-1:]:
            regex = regex[:-1]

        return regex


if __name__ == "__main__":
    nfa = NFA()
    nfa.begin_program()

    while True:
        input_command = input(
            "1 - for checking string, enter 1: \n2 - for generating dfa, enter 2: \n3 - for drawing nfa, enter 3: \n4 - to create regex, enter 4: \n5 - to exit, enter 5: \n")

        if int(input_command) == 1:
            is_accepted = nfa.is_accepted_by_nfa()
            if is_accepted:
                print("string is accepted")
            else:
                print("string is NOT accepted")

        elif int(input_command) == 2:
            nfa.create_equivalent_dfa()
            print("DFA generated successfuly!")

        elif int(input_command) == 3:
            nfa.draw_nfa()
            print("NFA generated successfuly!")

        elif int(input_command) == 4:
            regex = nfa.find_regex()
            print("the generated regex is: " + regex)

        elif int(input_command) == 5:
            break
